# Build the main image.
FROM php:8.3.6-fpm-bookworm

ENV APP_ENV=prod
ENV APP_PUBLIC_PATH=/var/www/mra/public
ENV COMPOSER_ALLOW_SUPERUSER=1
ENV APP_ID=mra
ARG APP_VERSION
ENV APP_VERSION=$APP_VERSION

RUN apt update && apt install -y \
    curl \
    git \
    cron \
    # zip/unzip packages required for Composer in order to install packages.
    zlib1g-dev \
    libzip-dev \
    unzip \
    nginx \
    supervisor \
    # libicu-dev is a dependency required by the `intl` extension.
    libicu-dev \
    # ffmpeg is needed for combining Reddit video and audio asset files.
    ffmpeg

RUN docker-php-ext-install \
    pdo \
    intl \
    # sysvsem is required for the RateLimiter Semaphore store.
    sysvsem

RUN docker-php-ext-install zip

# Install Node.
# https://stackoverflow.com/a/77021599
# https://github.com/nodesource/distributions#installation-instructions
RUN set -uex; \
    apt-get install -y ca-certificates curl gnupg; \
    mkdir -p /etc/apt/keyrings; \
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key \
     | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg; \
    NODE_MAJOR=20; \
    echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" \
     > /etc/apt/sources.list.d/nodesource.list; \
    apt-get update; \
    apt-get install -y nodejs;

# Install Yarn.
RUN corepack enable \
    && corepack prepare yarn@stable --activate

# Clean up apt cache.
RUN rm -rf /var/lib/apt/lists/*

# Configure php.
COPY build/php.prod.ini /usr/local/etc/php/php.ini

# Install Composer.
# https://stackoverflow.com/a/58694421
COPY --from=composer:latest /usr/bin/composer /usr/local/bin/composer
RUN echo "export PATH=$HOME/.composer/vendor/bin:$PATH" >> $HOME/.profile

# Copy application to image.
RUN mkdir /var/www/mra/
COPY src /var/www/mra
WORKDIR /var/www/mra
RUN rm -rf var

# Required environment variables and file must be set for composer install.
RUN cp .env.sample .env
RUN set -eux; \
    mkdir -p var/cache var/log; \
    if [ -f composer.json ]; then \
        composer install --prefer-dist --no-dev --no-autoloader --no-scripts --no-progress; \
        composer clear-cache; \
        composer dump-autoload --classmap-authoritative --no-dev; \
        composer dump-env prod; \
        composer run-script --no-dev post-install-cmd; \
        chmod +x bin/console; sync; \
    fi

RUN set -eux; \
    if [ -f .env.local.php ]; then \
        rm -f .env.local.php; \
    fi
VOLUME /var/www/mra/var

# Install and build production UX assets.
RUN yarn install && \
    yarn encore prod

# Cron setup.
ADD build/cron/crontab.txt /crontab.txt
RUN crontab /crontab.txt

# Configure Nginx.
COPY build/nginx-site.conf /etc/nginx/sites-enabled/default

# Configure Entrypoint.
COPY entrypoint.sh /entrypoint.sh
RUN chmod u+x /entrypoint.sh

# Configure Supervisor.
RUN mkdir -p /var/log/supervisor
COPY ./build/supervisord.conf /etc/supervisor/supervisord.conf
COPY ./build/supervisord/cron.conf /etc/supervisor/conf.d/cron.conf

# Additional folder setup.
RUN mkdir /database
RUN mkdir /r-media

ENTRYPOINT ["/entrypoint.sh"]